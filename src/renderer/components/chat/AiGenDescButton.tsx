/**
 * TagSpaces - universal file and folder organizer
 * Copyright (C) 2024-present TagSpaces GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License (version 3) as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

import TsButton, { TSButtonProps } from '-/components/TsButton';
import { useAiGenerationDialogContext } from '-/components/dialogs/hooks/useAiGenerationDialogContext';
import { TabNames } from '-/hooks/EntryPropsTabsContextProvider';
import { useChatContext } from '-/hooks/useChatContext';
import { useFilePropertiesContext } from '-/hooks/useFilePropertiesContext';
import { useIOActionsContext } from '-/hooks/useIOActionsContext';
import { useNotificationContext } from '-/hooks/useNotificationContext';
import { useOpenedEntryContext } from '-/hooks/useOpenedEntryContext';
import { AppDispatch } from '-/reducers/app';
import { actions as SettingsActions } from '-/reducers/settings';
import { TS } from '-/tagspaces.namespace';
import { ButtonGroup } from '@mui/material';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useDispatch } from 'react-redux';
import { AIIcon } from '../CommonIcons';

type Props = TSButtonProps & {};

function AiGenDescButton(props: Props) {
  const { t } = useTranslation();
  const { disabled } = props;
  const dispatch: AppDispatch = useDispatch();
  //const defaultAiProvider: AIProvider = useSelector(getDefaultAIProvider);
  const { openedEntry } = useOpenedEntryContext();
  const { setDescriptionChange } = useIOActionsContext();
  const { descriptionGenerate } = useChatContext();
  const { setDescription, saveDescription } = useFilePropertiesContext();
  const { showNotification } = useNotificationContext();
  const { openAiGenerationDialog } = useAiGenerationDialogContext();

  const [isLoading, setIsLoading] = useState<boolean>(false);

  //const openedEntryModel = getEntryModel(openedEntry?.name, defaultAiProvider);
  if (!openedEntry) {
    //|| !openedEntryModel) {
    return null;
  }

  const handleResult = (success: boolean) => {
    if (success) {
      showNotification(
        'Description for ' + openedEntry.name + ' generated by an AI.',
      );
    }
  };
  function handleGenerationResult(entry: TS.FileSystemEntry) {
    //console.log('newOllamaMessage response:' + response);
    if (entry) {
      setIsLoading(false);
      if (entry.uuid === openedEntry.uuid) {
        dispatch(SettingsActions.setEntryContainerTab(TabNames.descriptionTab));
        setDescription(entry.meta.description);
        return saveDescription().then(handleResult);
      } else {
        return setDescriptionChange(entry, entry.meta.description).then(
          handleResult,
        );
      }
    }
  }

  return (
    <ButtonGroup>
      <TsButton
        loading={isLoading}
        disabled={isLoading || disabled}
        // tooltip="Uses currently configured AI model to generate description for this file"
        // startIcon={<AIIcon />}
        data-tid="generateDescriptionAITID"
        style={{
          borderTopRightRadius: 0,
          borderBottomRightRadius: 0,
          paddingLeft: 28,
        }}
        onClick={() => {
          setIsLoading(true);
          descriptionGenerate(openedEntry).then((entry) =>
            handleGenerationResult(entry),
          );
        }}
      >
        {t('core:generateDescription')}
      </TsButton>
      <TsButton
        // tooltip={t('core:openGenSettings')}
        aria-label={t('core:openGenSettings')}
        data-tid="fileContainerPrevFile"
        onClick={() => {
          openAiGenerationDialog('summary');
        }}
        style={{
          borderTopLeftRadius: 0,
          borderBottomLeftRadius: 0,
        }}
      >
        <AIIcon fontSize="small" />
      </TsButton>
    </ButtonGroup>
  );
}

export default AiGenDescButton;
